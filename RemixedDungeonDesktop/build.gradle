import io.github.fourlastor.construo.Target

plugins {
    id 'java'
    id 'application'
    id "io.github.fourlastor.construo" version "1.5.1"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

project.ext.assetsDir = new File("src/desktop/assets")

project.ext.version = '32.2'

java {
    sourceCompatibility = JavaVersion.VERSION_1_10
    targetCompatibility = JavaVersion.VERSION_1_10
}

jar {
    manifest {
        attributes 'Main-Class': 'com.nyrds.pixeldungeon.desktop.DesktopLauncher'
    }

}

shadowJar {
    archiveBaseName.set('RemixedDungeon')
    archiveVersion.set(project.ext.version)
    archiveClassifier.set('')
    manifest {
        attributes 'Main-Class': 'com.nyrds.pixeldungeon.desktop.DesktopLauncher'
    }
}

application {
    applicationName = 'RemixedDungeon-desktop'
    applicationDefaultJvmArgs = ['-Dassets.dir=assets']
    mainClass = 'com.nyrds.pixeldungeon.desktop.DesktopLauncher'
    applicationDefaultJvmArgs = ["--add-opens", "java.base/java.util=ALL-UNNAMED"]

    sourceSets {
        main {
            java {
                srcDir '../RemixedDungeon/src/main/java'
                srcDir 'src/desktop/java'
                srcDir 'src/market_none/java'
                srcDir 'src/libgdx/java'
            }
        }
    }
}


tasks.withType(JavaExec).configureEach {
    jvmArgs += ["--add-opens", "java.base/java.util=ALL-UNNAMED"]
}

// Custom task to run the Python script
tasks.register('codegen', Exec) {
    commandLine 'python3', 'make_r.py'
    commandLine 'python3', 'make_json.py'
}

compileJava.dependsOn codegen

ext {
    gdxVersion = '1.13.0'
}


distributions {
    main {
        contents {
            from('../RemixedDungeon/src/main/assets') {
                into 'assets'
            }
        }
    }
}

tasks.register('dist', Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}


dependencies {
    implementation project(':annotation')
    implementation project(':json_clone')

    compileOnly project(':processor')
    annotationProcessor project(':processor')

    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.luaj:luaj-jse:3.0.1'
    implementation 'info.guardianproject.netcipher:netcipher:1.2'
    implementation 'org.hjson:hjson:3.0.0'
    implementation 'commons-io:commons-io:2.6' //don't upgrade will cause runtime crash on old devices
    implementation 'org.jetbrains:annotations:24.1.0'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    implementation 'com.google.guava:guava:32.0.1-jre'

    implementation 'org.nanohttpd:nanohttpd:2.3.1'

    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
}

construo {
    name.set("RemixedDungeon")
    humanName.set("Remixed Dungeon")
    version.set(project.ext.version)


    targets.configure {
        register("linuxX64", Target.Linux) {
            architecture.set(Target.Architecture.X86_64)
            jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.11%2B9/OpenJDK17U-jdk_x64_linux_hotspot_17.0.11_9.tar.gz")
        }
        register("macM1", Target.MacOs) {
            architecture.set(Target.Architecture.AARCH64)
            jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.11%2B9/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.11_9.tar.gz")
            // macOS needs an identifier
            identifier.set("com.nyrds.pixeldungeon.ml")
            // Optional: icon for macOS
            //macIcon.set(project.file("path/to/mac-icon.icns"))
        }
        register("winX64", Target.Windows) {
            architecture.set(Target.Architecture.X86_64)
            jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.11%2B9/OpenJDK17U-jdk_x64_windows_hotspot_17.0.11_9.zip")
            // use executable with GPU hints, defaults to true
            useGpuHint.set(false)
        }
    }
}


construo.targets.each { target ->
    def tag = target.name
    tasks.register("makeDesktopDist${tag.capitalize()}", Zip) { zipTask ->
        // Use the correct file name for the original zip
        def originalZip = file("${buildDir}/construo/dist/RemixedDungeon-${tag}.zip")
        zipTask.archiveFileName = "RemixedDungeon-${tag}.zip"
        zipTask.destinationDirectory = file("../dist")

        doFirst {
            if (archivePath.exists()) {
                archivePath.delete()
            }
        }

        zipTask.from(zipTree(originalZip))

        zipTask.from(file("src/desktop/assets")) {
            into("RemixedDungeon-${project.ext.version}-${tag}/mods/Remixed")
        }

        zipTask.from(file("src/desktop/d_assets")) {
            into("RemixedDungeon-${project.ext.version}-${tag}/mods/Remixed")
        }

        zipTask.from(file("src/desktop/l10ns")) {
            into("RemixedDungeon-${project.ext.version}-${tag}/mods/Remixed")
        }

        // Declare explicit dependency on the corresponding package task
        zipTask.dependsOn "package${tag.capitalize()}"
    }
}
